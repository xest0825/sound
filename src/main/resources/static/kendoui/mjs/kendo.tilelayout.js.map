{"version":3,"file":"kendo.tilelayout.js","names":["__meta__","id","name","category","depends","features","description","$","kendo","window","ui","Widget","Draggable","keys","selector","selectorFromClasses","RESIZE","REORDER","NS","GRABCURSOR","TileLayout","extend","init","element","options","that","this","fn","call","cssNumber","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","addClass","styles","wrapper","_setWrapperStyles","_initContainers","_resizable","_navigatable","_reorderable","events","columns","gap","rows","containers","resizable","reorderable","navigatable","columnsWidth","rowsHeight","height","width","destroy","_draggableInstance","find","each","item","data","resizeHandle","off","remove","setOptions","deepExtend","empty","getOptions","result","items","container","header","headerSettings","body","containerSettings","headerContent","containerElements","children","hasElements","length","itemsMap","i","guid","current","attr","_addContainer","template","text","itemHeader","itemHeaderTitle","append","appendTo","itemBody","bodyTemplate","Error","index","order","_setContainerCoordinates","push","css","format","padding","settings","colSpan","rowSpan","_updateContainers","_createResizeHandle","side","down","_isresizing","_positionResizeHandle","cursorClass","leftBorderWidth","parseFloat","bottomBorderWidth","containerHeight","containerWidth","top","left","support","isRtl","removeClass","show","_createResizeHint","hint","resizeHint","insertAfter","_removeResizeHint","_positionHint","_removeAbsoluteStyles","_positionAbsolutely","position","outerWidth","outerHeight","on","_keyDown","bind","e","target","canHandle","is","ctrlKey","keyCode","LEFT","_resizeItem","RIGHT","UP","DOWN","shiftKey","_reorderItem","preventDefault","dir","delta","newSpan","parseInt","replace","split","trigger","newOrder","oldOrder","maxOrder","_updateDOM","newIndex","oldIndex","_sortContainers","indexAttr","sort","a","b","indexA","indexB","undefined","fractionWidth","fractionHeight","currentContainer","rowsCount","lastXLocation","lastYLocation","initialWidth","initialHeight","startColSpan","startRowSpan","itemsMaxSpace","rightPosition","downPosition","rectPosition","getBoundingClientRect","Math","abs","right","clientX","bottom","clientY","Resizable","handle","start","currentTarget","_calculateFractionWidth","_calculateRightEndSide","x","location","scrollHeight","y","resize","overflowsLayout","isBeyondMinimum","hintColumns","hintRows","mouseDeltaX","mouseDeltaY","deltaFromStart","resizeRowsCount","resizeColumnsCount","clientRect","style","scrollX","floor","max","scrollY","resizeend","first","columnGap","_createDropHint","dropHint","reorderHint","columnEnd","rowEnd","direction","_insertDropHint","insertBefore","_removeDropHint","originalElement","itemSelector","headerSelector","group","filter","autoScroll","ignore","closest","clone","dragstart","drag","dropContainer","containerBoundaries","elementUnderCursor","sender","draggedItem","containsOrEqualTo","hide","hasClass","next","prev","dragend","end","itemId","min","kendoDropTarget","dragenter","dropContainerBoundaries","dropTarget","parent","child","contains","plugin","jQuery"],"sources":["kendo.tilelayout.js"],"mappings":"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","sourcesContent":["import './kendo.core.js';\nimport './kendo.draganddrop.js';\nimport './kendo.resizable.js';\n\nvar __meta__ = {\n        id: \"tilelayout\",\n        name: \"TileLayout\",\n        category: \"web\",\n        depends: [\"core\"],\n        features: [\n            {\n                id: \"tilelayout-resizable\",\n                name: \"Resizable\",\n                description: \"Support for resizing\",\n                depends: [\"resizable\"]\n            },\n            {\n                id: \"tilelayout-reorderable\",\n                name: \"Reorderable\",\n                description: \"Support for reordering\",\n                depends: [\"draganddrop\"]\n            }\n        ]\n    };\n\n    (function($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            Draggable = ui.Draggable,\n            keys = kendo.keys,\n            selector = kendo.selectorFromClasses,\n            RESIZE = \"resize\",\n            REORDER = \"reorder\",\n            NS = \".kendoTileLayout\",\n            DOWNCURSOR = \"k-cursor-ns-resize\",\n            RIGHTCURSOR = \"k-cursor-ew-resize\",\n            DIAGONALCURSOR = \"k-cursor-nwse-resize\",\n            RTLDIAGONALCURSOR = \"k-cursor-nesw-resize\",\n            GRABCURSOR = \"k-cursor-grab\",\n            GRABBINGCURSOR = \"k-cursor-grabbing\",\n            MINIMALSPAN = 1,\n            CURSORCLASSES = \"k-cursor-nesw-resize k-cursor-nwse-resize k-cursor-ew-resize k-cursor-ns-resize\";\n\n        var tileLayoutStyles = {\n            wrapper: \"k-widget k-tilelayout\",\n            item: \"k-tilelayout-item k-card\",\n            itemHeader: \"k-tilelayout-item-header k-card-header\",\n            itemHeaderTitle: \"k-card-title\",\n            itemBody: \"k-tilelayout-item-body k-card-body\",\n            reorderHint: \"k-layout-item-hint k-layout-item-hint-reorder\",\n            resizeHint: \"k-layout-item-hint k-layout-item-hint-resize\"\n        };\n\n        var TileLayout = Widget.extend({\n            init: function(element, options) {\n                var that = this;\n\n                Widget.fn.init.call(that, element, options);\n\n                $.cssNumber.gridColumnStart = true;\n                $.cssNumber.gridColumnEnd = true;\n                $.cssNumber.gridRowStart = true;\n                $.cssNumber.gridRowEnd = true;\n\n                that.element = $(element).addClass(TileLayout.styles.wrapper);\n\n                that._setWrapperStyles();\n                that._initContainers();\n                that._resizable();\n                that._navigatable();\n                that._reorderable();\n            },\n\n            events: [\n                RESIZE,\n                REORDER\n            ],\n\n            options: {\n                name: \"TileLayout\",\n                columns: null,\n                gap: {\n                    columns: 16,\n                    rows: 16\n                },\n                containers: [],\n                resizable: false,\n                reorderable: false,\n                navigatable: false,\n                columnsWidth: \"1fr\",\n                rowsHeight: \"1fr\",\n                height: \"\",\n                width: \"\"\n            },\n\n            destroy: function() {\n                Widget.fn.destroy.call(this);\n\n                if (this._draggableInstance) {\n\n                    this.element.find(\".k-tilelayout-item\").each(function() {\n                        var item = $(this);\n                        if (item.data(\"kendoDropTarget\")) {\n                            item.data(\"kendoDropTarget\").destroy();\n                        }\n                    });\n\n                    this._draggableInstance.destroy();\n                    this._draggableInstance = null;\n                }\n\n                if (this.resizable) {\n                    this.resizable.destroy();\n                    this.resizable = null;\n                }\n\n                if (this.resizeHandle) {\n                    this.resizeHandle.off(NS).remove();\n                    this.resizeHandle = null;\n                }\n\n                this.element.off(NS);\n            },\n\n            setOptions: function(options) {\n                this.destroy();\n                kendo.deepExtend(this.options, options);\n                this.element.empty();\n                this.init(this.element, this.options);\n            },\n\n            getOptions: function() {\n                var result = $.extend(true, {}, this.options);\n                result.containers = kendo.deepExtend([], this.items);\n\n                return result;\n            },\n\n            _initContainers: function() {\n                var that = this;\n                var containers = that.options.containers;\n                var containerElements = that.element.children();\n                var hasElements = !!containerElements.length;\n                var id;\n                var container;\n                var header;\n                var headerSettings;\n                var body;\n                var containerSettings;\n                var headerContent;\n\n                that.items = [];\n                that.itemsMap = {};\n\n                if (hasElements) {\n                    containerElements.each(function(i, element) {\n                        id = kendo.guid();\n                        var current = $(element)\n                            .addClass(TileLayout.styles.item)\n                            .attr(\"id\", id);\n\n                        that._addContainer(current, containers[i], i, id);\n                    });\n                } else {\n                    for (var i = 0; i < containers.length; i++) {\n                        id = kendo.guid();\n                        containerSettings = containers[i];\n                        container = $(\"<div></div>\")\n                            .addClass(TileLayout.styles.item)\n                            .attr(\"id\", id);\n\n                        headerSettings = containerSettings.header;\n                        if (headerSettings && (headerSettings.template || headerSettings.text)) {\n                            header = $(\"<div></div>\").addClass(TileLayout.styles.itemHeader);\n                            if (that.options.reorderable) {\n                                header.addClass(GRABCURSOR);\n                            }\n\n                            headerContent = headerSettings.text ? \"<div class='\" + TileLayout.styles.itemHeaderTitle + \"'>\" + headerSettings.text + \"</div>\" : null;\n                            header.append(headerContent || kendo.template(headerSettings.template)({}));\n                            header.appendTo(container);\n                        }\n                        body = $(\"<div></div>\").addClass(TileLayout.styles.itemBody);\n                        if (!containerSettings.bodyTemplate) {\n                            throw new Error(\"Having a bodyTemplate for the container is mandatory\");\n                        }\n                        body.append(kendo.template(containerSettings.bodyTemplate)({}));\n                        body.appendTo(container);\n                        container.appendTo(that.element);\n\n                        that._addContainer(container, containerSettings, i, id);\n                    }\n                }\n            },\n\n            _addContainer: function(element, item, index, id) {\n                var that = this;\n                item.order = typeof item.order == 'number' ? item.order : index;\n                element.attr(kendo.attr(\"index\"), item.order);\n                item.id = id;\n                that._setContainerCoordinates(element, item);\n                that.itemsMap[id] = item;\n                that.items.push(that.itemsMap[id]);\n            },\n\n            _setWrapperStyles: function() {\n                var that = this;\n                var options = that.options;\n                that.element.css({\n                    \"grid-template-columns\": kendo.format(\"repeat({0}, minmax(0, {1}))\", options.columns, typeof options.columnsWidth === \"string\" ? options.columnsWidth : options.columnsWidth + \"px\"),\n                    \"grid-auto-rows\": kendo.format(\"minmax(0, {0})\", typeof options.rowsHeight === \"string\" ? options.rowsHeight : options.rowsHeight + \"px\"),\n                    \"column-gap\": options.gap.columns,\n                    \"width\": typeof options.width === \"string\" ? options.width : options.width + \"px\",\n                    \"height\": typeof options.height === \"string\" ? options.height : options.height + \"px\",\n                    \"padding\": options.gap.rows + \"px \" + options.gap.columns + \"px \",\n                    \"row-gap\": options.gap.rows\n                });\n            },\n\n            _setContainerCoordinates: function(element, settings) {\n                if (!settings) {\n                    return;\n                }\n                element.css({\n                    \"order\": settings.order,\n                    \"grid-column-end\": kendo.format(\"span {0}\", settings.colSpan),\n                    \"grid-row-end\": kendo.format(\"span {0}\", settings.rowSpan)\n                })\n                    .attr(kendo.attr(\"index\"), settings.order);\n            },\n\n            _updateContainers: function() {\n                var that = this;\n\n                for (var i = 0; i < that.items.length; i++) {\n                    that._setContainerCoordinates(that.element.find(\"#\" + that.items[i].id), that.items[i]);\n                }\n            },\n\n            _createResizeHandle: function(container, side, down) {\n                var that = this;\n\n                if (that._isresizing) {\n                    return;\n                }\n\n                if (that.resizeHandle && that.resizeHandle.data(\"div\")[0] !== container[0]) {\n                    that.resizeHandle.off(NS).remove();\n                    that.resizeHandle = null;\n                }\n\n                if (!that.resizeHandle) {\n                    that.resizeHandle = $(\n                        '<div class=\"k-resize-handle\"></div>'\n                    );\n                    that.resizeHandle.appendTo(container);\n                }\n\n                that._positionResizeHandle(container, side, down);\n            },\n\n            _positionResizeHandle: function(container, side, down) {\n                var that = this;\n                var leftBorderWidth = parseFloat(container.css(\"borderRightWidth\"));\n                var bottomBorderWidth = parseFloat(container.css(\"borderBottomWidth\"));\n                var containerHeight = container.height();\n                var containerWidth = container.width();\n                var top = down ? containerHeight - 6.5 - bottomBorderWidth : 0;\n                var left = side ? containerWidth - 4.5 - leftBorderWidth : 0;\n                var width = 9;\n                var height = 9;\n                var cursorClass;\n\n                if (side && down) {\n                    height = width = 25;\n                    top -= 12.5;\n                    left -= 12.5;\n                    cursorClass = kendo.support.isRtl(that.element) ? RTLDIAGONALCURSOR : DIAGONALCURSOR;\n                } else if (side && !down) {\n                    height = containerHeight;\n                    cursorClass = RIGHTCURSOR;\n                } else if (!side && down) {\n                    width = containerWidth;\n                    cursorClass = DOWNCURSOR;\n                }\n\n                that.resizeHandle\n                    .css({\n                        top: top,\n                        left: left,\n                        height: height,\n                        width: width\n                    })\n                    .attr(\"side\", side)\n                    .attr(\"down\", down)\n                    .removeClass(CURSORCLASSES)\n                    .addClass(cursorClass)\n                    .data(\"div\", container)\n                    .show();\n            },\n\n            _createResizeHint: function(container) {\n                var that = this;\n\n                if (that.hint) {\n                    return;\n                }\n\n                var colSpan = container.css(\"grid-column-end\");\n                var rowSpan = container.css(\"grid-row-end\");\n                var order = container.css(\"order\");\n\n                that.hint = $(\"<div class='\" + TileLayout.styles.resizeHint + \"'></div>\")\n                    .css({\n                        \"order\": order,\n                        \"grid-column-end\": colSpan,\n                        \"grid-row-end\": rowSpan\n                    })\n                    .insertAfter(container);\n            },\n\n            _removeResizeHint: function() {\n                if (this._isresizing) {\n                    return;\n                }\n\n                if (this.hint) {\n                    this.hint.remove();\n                    this.hint = null;\n                }\n            },\n\n            _positionHint: function(colSpan, rowSpan) {\n                var that = this;\n\n                if (colSpan) {\n                    that.hint.css(\"grid-column-end\", kendo.format(\"span {0}\", colSpan));\n                }\n\n                if (rowSpan) {\n                    that.hint.css(\"grid-row-end\", kendo.format(\"span {0}\", rowSpan));\n                }\n            },\n\n            _removeAbsoluteStyles: function(container) {\n                container.css(\"position\", \"\");\n                container.css(\"left\", \"\");\n                container.css(\"top\", \"\");\n                container.css(\"width\", \"\");\n                container.css(\"height\", \"\");\n                container.css(\"z-index\", \"\");\n            },\n\n            _positionAbsolutely: function(container) {\n                if (container.css(\"position\") == \"absolute\") {\n                    return;\n                }\n                var position = container.position();\n                var width = container.outerWidth();\n                var height = container.outerHeight();\n\n                container.css(\"position\", \"absolute\");\n                container.css(\"left\", position.left);\n                container.css(\"top\", position.top);\n                container.css(\"width\", width);\n                container.css(\"height\", height);\n                container.css(\"z-index\", 2);\n            },\n\n            _navigatable: function() {\n\n                if (!this.options.navigatable) {\n                    return;\n                }\n\n                var that = this;\n\n                that.element.children().attr(\"tabindex\", 0);\n                that.element.on(\"keydown\" + NS, that, that._keyDown.bind(that));\n            },\n\n            _keyDown: function(e) {\n                var target = $(e.target);\n                var canHandle = false;\n\n                if (!target.is(\".k-tilelayout-item.k-card\")) {\n                    return;\n                }\n\n\n                if (e.ctrlKey && e.keyCode == keys.LEFT) {\n                    canHandle = true;\n                    this._resizeItem(target, \"horizontal\", -1);\n                }\n\n                if (e.ctrlKey && e.keyCode == keys.RIGHT) {\n                    canHandle = true;\n                    this._resizeItem(target, \"horizontal\", 1);\n                }\n\n                if (e.ctrlKey && e.keyCode == keys.UP) {\n                    canHandle = true;\n                    this._resizeItem(target, \"vertical\", -1);\n                }\n\n                if (e.ctrlKey && e.keyCode == keys.DOWN) {\n                    canHandle = true;\n                    this._resizeItem(target, \"vertical\", 1);\n                }\n\n                if (e.shiftKey && e.keyCode == keys.LEFT) {\n                    canHandle = true;\n                    this._reorderItem(target, -1);\n                }\n\n                if (e.shiftKey && e.keyCode == keys.RIGHT) {\n                    canHandle = true;\n                    this._reorderItem(target, 1);\n                }\n\n                if (canHandle) {\n                    e.preventDefault();\n                }\n            },\n\n            _resizeItem: function(item, dir, delta) {\n                var that = this;\n                var id = item.attr(\"id\");\n                var newSpan;\n                var maxSpan;\n\n                if (!that.options.resizable) {\n                    return;\n                }\n\n                if (dir === \"horizontal\") {\n                    newSpan = parseInt(item.css(\"grid-column-end\").replace('span', ''), 10) + delta;\n                    maxSpan = that.element.css(\"grid-template-columns\").split(\" \").length;\n\n                    if (maxSpan >= newSpan && newSpan > 0) {\n                        that.itemsMap[id].colSpan = newSpan;\n                        item.css({\n                            \"grid-column-end\": kendo.format(\"span {0}\", newSpan)\n                        });\n                        that.trigger(RESIZE, {\n                            container: item\n                        });\n                    }\n                } else {\n                    newSpan = parseInt(item.css(\"grid-row-end\").replace('span', ''), 10) + delta;\n                    maxSpan = that.element.css(\"grid-template-rows\").split(\" \").length;\n\n                    if (maxSpan >= newSpan && newSpan > 0) {\n                        that.itemsMap[id].rowSpan = newSpan;\n                        item.css({\n                            \"grid-row-end\": kendo.format(\"span {0}\", newSpan)\n                        });\n                        that.trigger(RESIZE, {\n                            container: item\n                        });\n                    }\n                }\n            },\n\n            _reorderItem: function(item, newOrder) {\n                if (!this.options.reorderable) {\n                    return;\n                }\n\n                var oldOrder = parseInt(item.css(\"order\"), 10);\n                var maxOrder = this.element.children().length;\n                newOrder = oldOrder + newOrder;\n\n                if (newOrder >= 0 && newOrder < maxOrder) {\n                    var target = this.element.find(\"> [\" + kendo.attr(\"index\") + \"='\" + newOrder + \"']\");\n\n                    this.itemsMap[item.attr(\"id\")].order = newOrder;\n                    this.itemsMap[target.attr(\"id\")].order = oldOrder;\n\n                    this._updateContainers();\n                    this._updateDOM();\n                    item.trigger(\"focus\");// need to restore focus after DOM gets reordered\n\n                    this.trigger(REORDER, {\n                        newIndex: newOrder,\n                        oldIndex: oldOrder,\n                        container: item\n                    });\n                }\n            },\n\n            _sortContainers: function(containers) {\n                var indexAttr = kendo.attr(\"index\");\n\n                return containers.sort(function(a, b) {\n                    a = $(a);\n                    b = $(b);\n\n                    var indexA = a.attr(indexAttr);\n                    var indexB = b.attr(indexAttr);\n\n                    if (indexA === undefined) {\n                        indexA = $(a).index();\n                    }\n                    if (indexB === undefined) {\n                        indexB = $(b).index();\n                    }\n\n                    indexA = parseInt(indexA, 10);\n                    indexB = parseInt(indexB, 10);\n                    return indexA > indexB ? 1 : (indexA < indexB ? -1 : 0);\n                });\n            },\n            _updateDOM: function() {\n                var that = this;\n                var containers = that.element.children(\":visible\");\n\n                containers = that._sortContainers(containers);\n\n                containers.each(function() {\n                    $(this).appendTo(that.element);\n                });\n            },\n\n            _resizable: function() {\n                var that = this;\n                var side;\n                var down;\n                var id;\n                var fractionWidth;\n                var fractionHeight;\n                var currentContainer;\n                var lastXLocation = 0;\n                var lastYLocation = 0;\n                var initialWidth = 0;\n                var initialHeight = 0;\n                var startColSpan = 0;\n                var startRowSpan = 0;\n                var itemsMaxSpace = 0;\n                var rowsCount;\n\n                if (that.options.resizable) {\n                    that.element.on(\"mousemove\" + NS, selector(TileLayout.styles.item), function(e) {\n                        var rightPosition;\n                        var downPosition;\n                        var container = $(this);\n                        var rectPosition = container[0].getBoundingClientRect();\n\n                        rightPosition = Math.abs(rectPosition.right - e.clientX) < 16;\n                        downPosition = Math.abs(rectPosition.bottom - e.clientY) < 16;\n\n                        if (rightPosition && downPosition) {\n                            that._createResizeHandle(container, true, true);\n                        } else if (rightPosition) {\n                            that._createResizeHandle(container, true, false);\n                        } else if (downPosition) {\n                            that._createResizeHandle(container, false, true);\n                        }\n                    });\n\n                    that.resizable = new ui.Resizable(that.element, {\n                        handle: \"div.k-tilelayout-item > .k-resize-handle\",\n                        start: function(e) {\n                            var resizeHandle = $(e.currentTarget);\n                            currentContainer = resizeHandle.data(\"div\");\n                            id = currentContainer.attr(\"id\");\n                            side = resizeHandle.attr(\"side\");\n                            down = resizeHandle.attr(\"down\");\n                            rowsCount = that.element.css(\"grid-template-rows\").split(\" \").length;\n\n                            if (side) {\n                                fractionWidth = that._calculateFractionWidth();\n                                itemsMaxSpace = that._calculateRightEndSide(fractionWidth);\n                                lastXLocation = e.x.location;\n                                initialWidth = currentContainer.width();\n                                startColSpan = parseInt(currentContainer.css(\"grid-column-end\").replace('span', ''), 10);\n                            }\n\n                            if (down) {\n                                fractionHeight = (that.element[0].scrollHeight - (rowsCount + 1) * that.options.gap.rows) / rowsCount;\n                                lastYLocation = e.y.location;\n                                initialHeight = currentContainer.height();\n                                startRowSpan = parseInt(currentContainer.css(\"grid-row-end\").replace('span', ''), 10);\n                            }\n\n                            that._isresizing = true;\n                        },\n                        resize: function(e) {\n                            var hintColumns = 0;\n                            var hintRows = 0;\n                            var mouseDeltaX = 0;\n                            var mouseDeltaY = 0;\n                            var overflowsLayout;\n                            var isBeyondMinimum;\n                            var deltaFromStart = 0;\n                            var resizeRowsCount = 0;\n                            var resizeColumnsCount = 0;\n                            var clientRect = that.element[0].getBoundingClientRect();\n                            var height = that.element[0].style.height ? true : false;\n\n                            that._positionAbsolutely(currentContainer);\n                            that._createResizeHint(currentContainer);\n\n                            if (side == \"true\") {\n                                mouseDeltaX = e.x.location - lastXLocation;\n                                overflowsLayout = (clientRect.left + itemsMaxSpace - window.scrollX - e.x.location) < that.options.gap.columns;\n                                isBeyondMinimum = (initialWidth + mouseDeltaX) < fractionWidth;\n\n                                if (!overflowsLayout && !isBeyondMinimum) {\n                                    resizeColumnsCount = (mouseDeltaX) / (fractionWidth + that.options.gap.columns);\n                                    deltaFromStart = mouseDeltaX - (Math.floor(resizeColumnsCount) * (fractionWidth + that.options.gap.columns));\n                                    hintColumns = startColSpan + Math.floor(resizeColumnsCount) + ((deltaFromStart >= (fractionWidth / 2)) ? 1 : 0);\n                                    that.itemsMap[id].colSpan = Math.max(hintColumns, MINIMALSPAN);\n                                } else {\n                                    mouseDeltaX = 0;\n                                }\n                            }\n\n                            if (down == \"true\") {\n                                mouseDeltaY = e.y.location - lastYLocation;\n                                overflowsLayout = (clientRect.bottom + window.scrollY - e.y.location) < that.options.gap.rows;\n                                isBeyondMinimum = (initialHeight + mouseDeltaY) <= fractionHeight;\n\n                                if (!isBeyondMinimum && (!overflowsLayout || !height)) {\n                                    resizeRowsCount = (mouseDeltaY) / (fractionHeight + that.options.gap.rows);\n                                    deltaFromStart = mouseDeltaY - (Math.floor(resizeRowsCount) * (fractionHeight + that.options.gap.rows));\n                                    hintRows = startRowSpan + Math.floor(resizeRowsCount) + ((deltaFromStart >= (fractionHeight / 2)) ? 1 : 0);\n                                    that.itemsMap[id].rowSpan = Math.max(hintRows, MINIMALSPAN);\n                                } else {\n                                    mouseDeltaY = 0;\n                                }\n                            }\n\n                            that._positionHint(hintColumns, hintRows);\n                            that._positionResizeHandle(currentContainer, side == \"true\", down == \"true\");\n                            if (mouseDeltaY) {\n                                currentContainer.css(\"height\", initialHeight + mouseDeltaY);\n                            }\n                            if (mouseDeltaX) {\n                                currentContainer.css(\"width\", initialWidth + mouseDeltaX);\n                            }\n                        },\n                        resizeend: function() {\n                            that._isresizing = false;\n                            that._setContainerCoordinates(currentContainer, that.itemsMap[id]);\n                            that._removeAbsoluteStyles(currentContainer);\n                            that._removeResizeHint();\n                            that.trigger(RESIZE, {\n                                container: currentContainer\n                            });\n                        }\n                    });\n                }\n            },\n\n            _calculateFractionWidth: function() {\n                var that = this;\n                var container = that.element.children().first();\n                var colSpan = that.itemsMap[container.attr(\"id\")].colSpan;\n                var totalWidth = container.outerWidth();\n\n                return (totalWidth - (colSpan - 1) * (that.options.gap.columns)) / colSpan;\n            },\n\n            _calculateRightEndSide: function(fractionWidth) {\n                var that = this;\n                var columns = that.options.columns;\n                var columnGap = that.options.gap.columns;\n\n                return columns * (fractionWidth + columnGap) + columnGap;\n            },\n\n            _createDropHint: function(settings) {\n                this.dropHint = $(\"<div class='\" + TileLayout.styles.reorderHint + \"'></div>\")\n                    .css({\n                        \"order\": settings.order,\n                        \"grid-column-end\": settings.columnEnd,\n                        \"grid-row-end\": settings.rowEnd\n                    })\n                    .attr(kendo.attr(\"index\"), settings.order)\n                    .attr(\"direction\", settings.direction);\n            },\n\n            _insertDropHint: function(container, direction) {\n                if (direction == \"right\") {\n                    this.dropHint.insertAfter(container);\n                } else {\n                    this.dropHint.insertBefore(container);\n                }\n            },\n\n            _removeDropHint: function() {\n                if (this.dropHint) {\n                    this.dropHint.remove();\n                    this.dropHint = null;\n                }\n            },\n\n            _reorderable: function() {\n                if (!this.options.reorderable) {\n                    return;\n                }\n\n                var that = this;\n                var element = that.element;\n                var originalElement;\n                var itemSelector = selector(TileLayout.styles.item);\n                var headerSelector = selector(TileLayout.styles.itemHeader);\n                var group = kendo.guid();\n\n                this._draggableInstance = new Draggable(this.element, {\n                    filter: headerSelector,\n                    autoScroll: true,\n                    ignore: \":input\",\n                    group: group,\n                    hint: function(target) {\n                        var item = target.closest(itemSelector);\n                        var width = item.width();\n                        var height = item.height();\n                        var clone = item.clone();\n                        clone.find(headerSelector)\n                            .removeClass(GRABCURSOR)\n                            .addClass(GRABBINGCURSOR);\n                        return clone.width(width).height(height);\n                    },\n                    dragstart: function(e) {\n                        originalElement = $(e.currentTarget).closest(itemSelector);\n                    },\n                    drag: function(e) {\n                        var elementUnderCursor = kendo.elementUnderCursor(e);\n                        var hint = e.sender.hint;\n                        var dropContainer;\n                        var containerBoundaries;\n                        var pixelsToLeftBorder;\n                        var pixelsToRightBorder;\n                        var direction;\n\n                        var draggedItem = that._draggableInstance.currentTarget.closest(itemSelector);\n                        var newOrder;\n\n                        if (containsOrEqualTo(hint[0], elementUnderCursor)) {\n                            hint.hide();\n\n                            elementUnderCursor = kendo.elementUnderCursor(e);\n\n                            if (!containsOrEqualTo(originalElement[0], elementUnderCursor)) {\n\n                                if (that.dropHint && that.dropHint[0] == elementUnderCursor[0]) {\n                                    hint.show();\n                                    return;\n                                }\n\n                                dropContainer = $(elementUnderCursor);\n                                dropContainer = dropContainer.hasClass(TileLayout.styles.item) ? dropContainer : dropContainer.closest(itemSelector);\n\n                                if (dropContainer.hasClass(TileLayout.styles.item)) {\n                                    containerBoundaries = dropContainer[0].getBoundingClientRect();\n                                    pixelsToLeftBorder = e.clientX - containerBoundaries.left;\n                                    pixelsToRightBorder = containerBoundaries.right - e.clientX;\n                                    direction = pixelsToLeftBorder > pixelsToRightBorder ? \"right\" : \"left\";\n                                    newOrder = dropContainer.css(\"order\");\n\n                                    if (that.dropHint && that.dropHint.attr(\"direction\") !== direction) {\n                                        var clone = that.dropHint.clone();\n                                        clone.css(\"order\", newOrder);\n                                        that.dropHint.remove();\n                                        that.dropHint = clone;\n\n                                        that._insertDropHint(dropContainer, direction);\n\n                                        that.dropHint\n                                            .attr(\"direction\", direction)\n                                            .attr(kendo.attr(\"index\"), newOrder);\n                                    } else if (!that.dropHint) {\n\n                                        var futureContainer = direction == \"right\" ? dropContainer.next() : dropContainer.prev();\n\n                                        if (futureContainer[0] != originalElement[0]) {\n                                            that._createDropHint({ order: newOrder, columnEnd: draggedItem.css(\"grid-column-end\"), rowEnd: draggedItem.css(\"grid-row-end\"), direction: direction });\n                                            originalElement.hide();\n                                            that._insertDropHint(dropContainer, direction);\n                                        }\n                                    }\n                                }\n                            }\n                            hint.show();\n                        }\n                    },\n                    dragend: function(e) {\n                        if (!that.dropHint) {\n                            e.sender.hint.remove();\n                            that._removeDropHint();\n                            return;\n                        }\n                        var newOrder = parseInt(that.dropHint.css(\"order\"), 10);\n                        var container = e.currentTarget.closest(itemSelector);\n                        var items = that.element.find(itemSelector);\n                        var oldOrder = parseInt(container.css(\"order\"), 10);\n                        var itemId = container.attr(\"id\");\n                        var containers = that.element.children(\":visible\");\n                        var start;\n                        var end;\n                        var item;\n                        var direction;\n\n                        containers = that._sortContainers(containers);\n\n                        newOrder = containers.index(that.dropHint[0]);\n                        end = Math.max(newOrder, oldOrder);\n                        start = Math.min(newOrder, oldOrder);\n\n                        that.itemsMap[itemId].order = newOrder;\n\n                        direction = newOrder > oldOrder ? \"right\" : \"left\"; //this is direction of movement\n\n                        if (direction == \"left\") {\n                            end--;\n                        } else {\n                            start++;\n                        }\n\n                        for (var i = start; i <= end; i++) {\n                            item = items.filter(\"[\" + kendo.attr(\"index\") + \"='\" + i + \"']\");\n                            that.itemsMap[item.attr(\"id\")].order += direction == \"left\" ? 1 : -1;\n                        }\n\n                        container.show();\n\n                        that._updateContainers();\n\n                        e.sender.hint.remove();\n                        that._removeDropHint();\n\n                        if (that.options.navigatable) {\n                            that._updateDOM();\n                        }\n\n                        that.trigger(REORDER, {\n                            newIndex: newOrder,\n                            oldIndex: oldOrder,\n                            container: container\n                        });\n                    }\n                });\n\n                element.find(itemSelector).kendoDropTarget({\n                    group: group,\n                    dragenter: function(e) {\n                        if (that._isresizing) {\n                            return;\n                        }\n                        var dropContainer = $(e.dropTarget);\n                        var target = that._draggableInstance.currentTarget.closest(itemSelector);\n                        var dropContainerBoundaries;\n                        var pixelsToLeftBorder;\n                        var pixelsToRightBorder;\n                        var futureContainer;\n                        var direction;\n\n                        if (originalElement[0] != dropContainer[0]) {\n\n                            dropContainerBoundaries = dropContainer[0].getBoundingClientRect();\n                            pixelsToLeftBorder = e.clientX - dropContainerBoundaries.left;\n                            pixelsToRightBorder = dropContainerBoundaries.right - e.clientX;\n                            direction = pixelsToLeftBorder > pixelsToRightBorder ? \"right\" : \"left\";\n\n                            futureContainer = direction == \"right\" ? dropContainer.next() : dropContainer.prev();\n\n                            //handle the case when the container will be shown over the original one\n                            if (futureContainer[0] == originalElement[0]) {\n                                return;\n                            }\n\n                            that._removeDropHint();\n\n                            originalElement.hide();\n\n                            that._createDropHint({ order: dropContainer.css(\"order\"), columnEnd: target.css(\"grid-column-end\"), rowEnd: target.css(\"grid-row-end\"), direction: direction });\n\n                            originalElement.hide();\n                            that._insertDropHint(dropContainer, direction);\n                        }\n                    }\n                });\n            }\n        });\n\n        function containsOrEqualTo(parent, child) {\n            try {\n                return $.contains(parent, child) || parent == child;\n            } catch (e) {\n                return false;\n            }\n        }\n\n        ui.plugin(TileLayout);\n\n        $.extend(true, TileLayout, { styles: tileLayoutStyles });\n    })(window.kendo.jQuery);\n"]}