{"version":3,"file":"kendo.chiplist.js","names":["__meta__","id","name","category","docsCategory","description","depends","$","undefined$1","kendo","window","ui","Widget","keys","isPlainObject","isEmptyObject","NS","DOT","SELECT","REMOVE","html","chipListStyles","widget","item","selected","disabled","enabledItemSelector","ChipList","extend","init","element","options","that","this","fn","call","renderChipList","_selectable","selectable","_applyAriaAttributes","_bindEvents","_items","items","fillMode","rounded","size","itemSize","events","destroy","_keydownProxy","unbind","_selectProxy","_removeProxy","off","find","each","_getChipFromElement","attr","role","_updateCssClasses","styles","removeClass","index","className","indexOf","addClass","getValidCssClass","_getInitializeChipOptions","itemOptions","attributes","tabindex","removable","remove","select","getKendoChip","chipOptions","selectedItems","chipEl","firstNavigatableItem","i","length","append","_createChip","_getFirstNavigatableItem","_applyTabIndex","filter","ind","ch","chip","_isItem","is","itemElement","el","kendoChip","_keydown","bind","_select","_remove","on","ev","sender","_triggerSelect","preventDefault","trigger","originalEvent","selectedChipElement","_removeItem","wrapper","_focusNavigatableItem","target","closest","key","keyCode","LEFT","RIGHT","nextCandidate","_getNavigatableItem","focus","first","_getLastNavigatableItem","last","current","prevAll","nextAll","children","state","enable","isNaN","eq","itemById","add","before","method","targetElement","setOptions","empty","plugin","jQuery"],"sources":["kendo.chiplist.js"],"mappings":"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","sourcesContent":["import './kendo.core.js';\nimport './kendo.chip.js';\nimport './kendo.html.chiplist.js';\n\nvar __meta__ = {\n    id: \"chiplist\",\n    name: \"ChipList\",\n    category: \"web\",\n    docsCategory: \"navigation\",\n    description: \"The ChipList component.\",\n    depends: [\"core\", \"chip\", \"html.chiplist\"]\n};\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        Widget = ui.Widget,\n        keys = kendo.keys,\n        isPlainObject = $.isPlainObject,\n        isEmptyObject = $.isEmptyObject,\n\n        NS = \".kendoChipList\",\n        PREFIX = \"k-chip-list-\",\n        DOT = \".\",\n\n        SELECT = \"select\",\n        REMOVE = \"remove\";\n    var html = kendo.html;\n\n    var chipListStyles = {\n        widget: \"k-chip-list\",\n        item: \"k-chip\",\n        selected: \"k-selected\",\n        disabled: \"k-disabled\",\n        enabledItemSelector: \"k-chip:not(.k-disabled)\"\n    };\n\n    var ChipList = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n            options = options || {};\n            Widget.fn.init.call(that, element, options);\n\n            html.renderChipList(element, $.extend({}, options));\n\n            that._selectable = that.options.selectable;\n            that._applyAriaAttributes();\n            that._bindEvents();\n            that._items();\n        },\n\n        options: {\n            name: \"ChipList\",\n            selectable: \"none\",\n            items: [],\n            fillMode: \"solid\",\n            rounded: \"medium\",\n            size: \"medium\",\n            itemSize: \"medium\"\n        },\n\n        events: [\n            SELECT,\n            REMOVE\n        ],\n\n        destroy: function() {\n            var that = this;\n\n            if (that._keydownProxy) {\n                that.unbind(that._keydownProxy);\n                that._keydownProxy = null;\n            }\n\n            if (that._selectProxy) {\n                that.unbind(that._selectProxy);\n                that._selectProxy = null;\n            }\n\n            if (that._removeProxy) {\n                that.unbind(that._removeProxy);\n                that._removeProxy = null;\n            }\n\n            that.element.off(NS);\n            that.element.find(\"[data-role='chip']\").each(function() {\n                that._getChipFromElement(this).destroy();\n            });\n\n            Widget.fn.destroy.call(this);\n        },\n\n        _applyAriaAttributes: function() {\n            var that = this;\n            if (that._selectable !== \"none\") {\n                that.element.attr({\n                    \"aria-multiselectable\": that._selectable === \"multiple\",\n                    role: \"listbox\",\n                    \"aria-label\": that.element.attr(\"id\") + \" listbox\",\n                    \"aria-orientation\": \"horizontal\"\n                });\n            }\n        },\n\n        _updateCssClasses: function() {\n            var that = this,\n                options = that.options,\n                styles = chipListStyles;\n\n            // Remove all class names\n            that.element.removeClass(function(index, className) {\n                if (className.indexOf('k-') === 0) {\n                    that.element.removeClass(className);\n                }\n            });\n\n            that.element.addClass(styles.widget);\n            that.element.addClass(kendo.getValidCssClass(PREFIX, \"size\", options.size));\n        },\n\n        _getInitializeChipOptions: function(itemOptions) {\n            var that = this,\n                options = that.options;\n\n            var attributes = $.extend(itemOptions.attributes || {}, {\n                tabindex: \"-1\"\n            });\n\n            if (options.selectable !== \"none\") {\n                attributes.role = \"option\";\n                attributes[\"aria-selected\"] = itemOptions.selected;\n            }\n\n            if (itemOptions.removable) {\n                attributes[\"aria-keyshortcuts\"] = \"Enter Delete\";\n            }\n\n            return $.extend({\n                fillMode: options.fillMode,\n                size: options.itemSize,\n                rounded: options.rounded,\n                selectable: options.selectable !== \"none\",\n                removable: options.removable,\n                remove: that._removeProxy,\n                select: that._selectProxy,\n            }, itemOptions, { attributes: attributes });\n        },\n\n        _getChipFromElement: function(element) {\n            return $(element).getKendoChip() || $(element).find(\"[data-role='chip']\").getKendoChip();\n        },\n\n        _items: function() {\n            var that = this,\n                options = that.options,\n                items = options.items,\n                chipOptions,\n                selectedItems,\n                chipEl,\n                firstNavigatableItem,\n                item;\n\n            for (var i = 0; i < items.length; i++) {\n                chipOptions = that._getInitializeChipOptions(items[i]);\n                chipEl = $(\"<span></span>\");\n                that.element.append(chipEl);\n                item = that._createChip(chipEl, chipOptions);\n            }\n\n            firstNavigatableItem = that._getFirstNavigatableItem();\n            if (firstNavigatableItem) {\n                that._applyTabIndex(that.items().index(firstNavigatableItem));\n            }\n\n            if (that._selectable === \"single\") {\n                selectedItems = that.items().filter(DOT + chipListStyles.selected);\n                selectedItems.each(function(ind, ch) {\n                    if (ind !== selectedItems.length - 1) {\n                        var chip = that._getChipFromElement(ch);\n                        if (chip) {\n                            chip.select(false);\n                        }\n                    }\n                });\n            }\n        },\n\n        _isItem: function(item) {\n            var that = this;\n\n            item = $(item);\n\n            return item.is(DOT + chipListStyles.item) && !!that.element.find(item).length;\n        },\n\n        _applyTabIndex: function(index) {\n            var that = this;\n            var itemElement = that.item(+index ? +index : 0);\n\n            that.items().each(function(ind, el) {\n                $(el).attr(\"tabindex\", \"-1\");\n            });\n\n            itemElement.attr(\"tabindex\", \"0\");\n        },\n\n        _createChip: function(element, chipOptions) {\n            return element.kendoChip(chipOptions);\n        },\n\n        _bindEvents: function() {\n            var that = this;\n            that._keydownProxy = that._keydown.bind(that);\n            that._selectProxy = that._select.bind(that);\n            that._removeProxy = that._remove.bind(that);\n\n            that.element.on(\"keydown\" + NS, DOT + chipListStyles.item, that._keydownProxy);\n        },\n\n        _select: function(ev) {\n            var that = this,\n                chip = ev.sender;\n\n            if (that._selectable == \"none\") {\n                ev.preventDefault();\n                return;\n            }\n\n            that._triggerSelect(chip, ev);\n        },\n\n        _triggerSelect: function(item, ev) {\n            var that = this,\n                selectedItems;\n\n            if (that.element.is(DOT + chipListStyles.disabled)) {\n                return;\n            }\n\n            if (that.trigger(SELECT, { originalEvent: ev, item: item })) {\n                return;\n            }\n\n            if (that._selectable === \"single\") {\n                selectedItems = that.select();\n                if (selectedItems.length > 0) {\n                    selectedItems.each(function(ind, selectedChipElement) {\n                        var chip = that._getChipFromElement(selectedChipElement);\n                        if (chip && chip !== item) {\n                            chip.select(false);\n                        }\n                    });\n                }\n            }\n        },\n\n        _remove: function(ev) {\n            var that = this,\n                chip = ev.sender;\n\n            if (that.trigger(REMOVE, { originalEvent: ev, item: ev.sender })) {\n                return;\n            }\n\n            that._removeItem(chip);\n        },\n\n        _removeItem: function(chip) {\n            var that = this;\n            if (chip) {\n                var el = chip.wrapper;\n                chip.destroy();\n                el.remove();\n                that._focusNavigatableItem();\n            }\n        },\n\n        _keydown: function(ev) {\n            // change the tabindex to the next/prev chip\n            // and remove it from the others\n            var that = this,\n                target = $(ev.target).closest(DOT + chipListStyles.item),\n                key = ev.keyCode;\n\n            if (key === keys.LEFT || key === keys.RIGHT) {\n                that._focusNavigatableItem(key, target);\n            }\n            // add support for Home and End keys?\n        },\n\n        _focusNavigatableItem: function(key, target) {\n            var that = this;\n            var nextCandidate = that._getNavigatableItem(key, target);\n            if (nextCandidate) {\n                that._applyTabIndex(that.items().index(nextCandidate));\n                nextCandidate.focus();\n            }\n        },\n\n        _getFirstNavigatableItem: function() {\n            var that = this;\n            return that.items().filter(DOT + chipListStyles.enabledItemSelector).first();\n        },\n\n        _getLastNavigatableItem: function() {\n            var that = this;\n            return that.items().filter(DOT + chipListStyles.enabledItemSelector).last();\n        },\n\n        _getNavigatableItem: function(key, target) {\n            var that = this;\n            var current;\n\n            if (target) {\n                current = target;\n            } else {\n                current = that._getFirstNavigatableItem();\n            }\n\n            if (key === keys.LEFT && target) {\n                current = target.prevAll(DOT + chipListStyles.enabledItemSelector).first();\n            }\n\n            if (key === keys.RIGHT && target) {\n                current = target.nextAll(DOT + chipListStyles.enabledItemSelector).first();\n            }\n\n            return current.length ? current : null;\n        },\n\n        items: function() {\n            var that = this;\n            return that.element.children();\n        },\n\n        select: function(item, state) {\n            var that = this,\n                chip,\n                selectedItems = that.items().filter(DOT + chipListStyles.selected);\n\n            if (!item) {\n                return selectedItems;\n            }\n\n            state = state !== false;\n\n            chip = that._getChipFromElement(item);\n            if (chip) {\n                if (that._selectable === \"single\") {\n                    selectedItems = that.select();\n                    if (selectedItems.length > 0) {\n                        selectedItems.each(function(ind, selectedChipElement) {\n                            var chip = that._getChipFromElement(selectedChipElement);\n                            if (chip && chip !== item) {\n                                chip.select(false);\n                            }\n                        });\n                    }\n                }\n\n                chip.select(state);\n            }\n        },\n\n        enable: function(item, state) {\n            var chip = this._getChipFromElement(item);\n            state = state !== false;\n\n            if (chip) {\n                chip.enable(state);\n            }\n        },\n\n        item: function(index) {\n            var that = this;\n\n            if (isNaN(index)) {\n                return null;\n            }\n\n            return that.items().eq(index);\n        },\n\n        itemById: function(id) {\n            var that = this;\n\n            return that.element.find(\"#\" + id);\n        },\n\n        add: function(item, before) {\n            // add validation to get element, options object and a Chip widget\n            var that = this,\n                method = \"append\",\n                chip,\n                chipEl,\n                targetElement = that.element;\n\n            if (before && that._isItem(before)) {\n                method = \"before\";\n                targetElement = $(before);\n            }\n\n            chip = that._getChipFromElement(item);\n            if (chip) {\n                targetElement[method](chip.wrapper);\n            } else if (item && isPlainObject(item) && !isEmptyObject(item)) {\n                chipEl = $(\"<span></span>\");\n                targetElement[method](chipEl);\n                that._createChip(chipEl, that._getInitializeChipOptions(item));\n            }\n        },\n\n        remove: function(item) {\n            var that = this;\n\n            if (item && that._isItem(item)) {\n                kendo.destroy(item);\n                item.remove();\n                that._focusNavigatableItem();\n            }\n        },\n\n        setOptions: function(options) {\n            var that = this;\n\n            Widget.fn.setOptions.call(this, options);\n            that._updateCssClasses();\n\n            if (options.items) {\n                that.element.empty();\n                that._items();\n            }\n        }\n    });\n\n    ui.plugin(ChipList);\n})(window.kendo.jQuery);\n"]}