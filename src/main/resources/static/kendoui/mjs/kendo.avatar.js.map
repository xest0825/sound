{"version":3,"file":"kendo.avatar.js","names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","Widget","ui","AVATAR_STYLES","AVATAR_TYPE","Avatar","extend","init","element","options","fn","call","this","_fromMarkup","_wrapper","_markupContent","length","_contentFromMarkup","_content","alt","border","className","fillMode","icon","image","rounded","size","style","text","themeColor","type","events","setOptions","currentOptions","wrapper","updatedOptions","_optionsFromWrapper","removeClass","empty","content","span","find","attr","append","first","children","slice","remove","trim","split","forEach","indexOf","substring","addClass","_applyCssClasses","css","prepend","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","concat","plugin","jQuery"],"sources":["kendo.avatar.js"],"mappings":"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","sourcesContent":["import './kendo.core.js';\n\nvar __meta__ = {\n    id: \"avatar\",\n    name: \"Avatar\",\n    category: \"web\",\n    description: \"The Avatar component represents an icon, text, or image rendered in a styled container.\",\n    depends: [ \"core\" ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        DASH = \"-\";\n\n    var AVATAR_STYLES = {\n        widget: \"k-widget\",\n        avatar: \"k-avatar\",\n        bordered: \"k-avatar-bordered\"\n    };\n\n    var AVATAR_TYPE = {\n        icon: \"icon\",\n        image: \"image\",\n        text: \"text\"\n    };\n\n    var Avatar = Widget.extend({\n        init: function(element, options) {\n            var that = this;\n\n            options = options || {};\n\n            Widget.fn.init.call(that, element, options);\n\n            this._fromMarkup();\n            this._wrapper();\n\n            if (this._markupContent && this._markupContent.length > 0) {\n                this._contentFromMarkup();\n            } else {\n                this._content();\n            }\n        },\n\n        options: {\n            name: \"Avatar\",\n            alt: null,\n            border: false,\n            className: null,\n            fillMode: \"solid\",\n            icon: null,\n            image: null,\n            rounded: \"full\",\n            size: \"medium\",\n            style: null,\n            text: null,\n            themeColor: \"primary\",\n            type: AVATAR_TYPE.text\n        },\n\n        events: [ ],\n\n        setOptions: function(options) {\n            var currentOptions = this.options,\n                wrapper = this.wrapper,\n                updatedOptions = $.extend({}, currentOptions, options);\n\n            Widget.fn.setOptions.call(this, options);\n\n            if (!updatedOptions[updatedOptions.type]) {\n                currentOptions = this._optionsFromWrapper(currentOptions);\n            }\n            if (updatedOptions.border === false) {\n                wrapper.removeClass(AVATAR_STYLES.bordered);\n            }\n\n            wrapper.empty();\n\n            this.options = currentOptions;\n            this._wrapper();\n            this._content();\n        },\n\n        _content: function() {\n            var span = this.wrapper.find(\"> span\"),\n                options = this.options,\n                type = options.type,\n                content;\n\n            if (type === AVATAR_TYPE.icon) {\n                content = $(\"<span class='k-icon k-i-\" + options.icon + \"'>\");\n            } else if (type === AVATAR_TYPE.image) {\n                content = $(\"<img src='\" + options.image + \"'>\");\n\n                if (options.alt) {\n                    content.attr(\"alt\", options.alt);\n                }\n            } else if (type === AVATAR_TYPE.text) {\n                content = $(\"<span>\" + options.text + \"</span>\");\n            }\n\n            span.append(content);\n        },\n\n        _contentFromMarkup: function() {\n            var span = this.wrapper.find(\"> span\").first();\n\n            span.append(this._markupContent);\n        },\n\n        _fromMarkup: function() {\n            var element = this.element,\n                options = this.options,\n                image, icon;\n\n            element.children().slice(1).remove();\n\n            image = element.children(\"img\");\n            icon = element.children(\".k-icon\");\n\n            if (image.length > 0 ) {\n                options.type = AVATAR_TYPE.image;\n                this._markupContent = image.first();\n            } else if (icon.length > 0) {\n                options.type = AVATAR_TYPE.icon;\n                this._markupContent = icon.first();\n            } else if (element.children().length > 0) {\n                options.type = AVATAR_TYPE.text;\n                this._markupContent = element.children();\n            }\n        },\n\n        _optionsFromWrapper: function(updatedOptions) {\n            var wrapper = this.wrapper,\n                classes, image;\n\n            if (updatedOptions.type === AVATAR_TYPE.text) {\n                updatedOptions.text = wrapper.text().trim();\n            } else if (updatedOptions.type === AVATAR_TYPE.icon) {\n                classes = wrapper.find(\".k-icon\").attr(\"class\").split(/\\s+/);\n\n                classes.forEach(function(name) {\n                    if (name.indexOf(\"k-i-\") === 0) {\n                        updatedOptions.icon = name.substring(4);\n                    }\n                });\n            } else if (updatedOptions.type === AVATAR_TYPE.image) {\n                image = wrapper.find(\"img\");\n                updatedOptions.image = image.attr(\"src\");\n\n                if (image.attr(\"alt\")) {\n                    updatedOptions.alt = image.attr(\"alt\");\n                }\n            }\n\n            return updatedOptions;\n        },\n\n        _wrapper: function() {\n            var wrapper = this.element,\n                options = this.options,\n                span = $(\"<span>\");\n\n            this.wrapper = wrapper;\n            wrapper.addClass(AVATAR_STYLES.avatar);\n\n            this._applyCssClasses();\n\n            if (options.border) {\n                wrapper.addClass(AVATAR_STYLES.bordered);\n            }\n            if (options.style) {\n                wrapper.css(options.style);\n            }\n            if (options.className) {\n                wrapper.addClass(options.className);\n            }\n\n            span.addClass(AVATAR_STYLES.avatar + DASH + options.type);\n            wrapper.prepend(span);\n        }\n    });\n\n    kendo.cssProperties.registerPrefix(\"Avatar\", \"k-avatar-\");\n\n    kendo.cssProperties.registerValues(\"Avatar\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n\n    kendo.ui.plugin(Avatar);\n\n})(window.kendo.jQuery);\n"]}